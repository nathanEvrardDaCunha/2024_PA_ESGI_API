generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@db:5432/mydatabase?schema=public"
}

model Person {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  birthDate   DateTime
  phoneNumber String   @unique
  role        String

  generalAssembly   GeneralAssembly[]
  session           Session[]
  donation          Donation[]
  membership        Membership?
  equipment         Equipment[]
  task              Task[]
  location          Location?         @relation(fields: [locationId], references: [id])
  locationId        String?
  choices           Choice[]          @relation("VoterChoices")
  authoredDocuments Document[]        @relation("AuthorDocuments")
  groupMemberships  GroupMembership[]
  documentAccess    PersonDocument[]
  Response          Response[]
  SurveyResponse    SurveyResponse[]
}

model Membership {
  id               String    @id @default(cuid())
  joinDate         DateTime
  status           String
  expiryDate       DateTime
  accessLevel      String
  fees             Float
  renewalDate      DateTime?
  type             String
  paymentMethod    String
  renewalFrequency Int
  url              String?

  person   Person @relation(fields: [personId], references: [id])
  personId String @unique
}

model Donation {
  id              String   @id @default(cuid())
  status          String
  type            String
  paymentMethod   String
  message         String?
  amount          Float
  transactionDate DateTime
  url             String?

  person   Person @relation(fields: [personId], references: [id])
  personId String
}

model GeneralAssembly {
  id           String   @id @default(cuid())
  meetingDate  DateTime
  status       String
  outcome      String
  creationDate DateTime
  endingDate   DateTime

  topics     Topic[]   @relation("assemblyTopics")
  person     Person[]
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?
  surveys    Survey[]
}

model Topic {
  id                String           @id @default(cuid())
  label             String
  description       String
  status            String
  isAnonyme         Boolean
  modality          String
  currentRound      Int              @default(1)
  totalRounds       Int              @default(1)
  quorum            Int // Pourcentage de participation n√©cessaire pour valider un vote
  generalAssemblyId String?
  generalAssembly   GeneralAssembly? @relation("assemblyTopics", fields: [generalAssemblyId], references: [id])
  choices           Choice[]
}

model Choice {
  id          String   @id @default(cuid())
  description String
  topicId     String
  round       Int
  voteCount   Int      @default(0)
  topic       Topic    @relation(fields: [topicId], references: [id])
  voters      Person[] @relation("VoterChoices")
}

model Document {
  id           String           @id @default(cuid())
  title        String
  creationDate DateTime
  lastModified DateTime?
  type         String
  description  String
  accessLevel  String
  version      Int
  status       String
  fileUrl      String
  authorId     String
  author       Person           @relation("AuthorDocuments", fields: [authorId], references: [id])
  groups       Group[]          @relation("DocumentGroups")
  activities   Activity[]       @relation("ActivityDocuments")
  accessors    PersonDocument[]
}

model Group {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  documents   Document[]        @relation("DocumentGroups")
  members     GroupMembership[]
}

model GroupMembership {
  id       String @id @default(cuid())
  person   Person @relation(fields: [personId], references: [id])
  personId String
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String

  @@unique([personId, groupId])
}

model Activity {
  id                String            @id @default(cuid())
  title             String
  description       String
  startDate         DateTime
  endDate           DateTime
  type              String
  status            String
  document          Document[]        @relation("ActivityDocuments")
  equipment         Equipment[]
  task              Task[]
  location          Location[]
  generalAssemblyId String?
  GeneralAssembly   GeneralAssembly[]
}

model Equipment {
  id               String   @id @default(cuid())
  name             String
  description      String
  serialNumber     String
  manufacturer     String
  degradationState String
  status           String
  purchaseDate     DateTime
  cost             Float

  person   Person[]
  activity Activity[]
  location Location[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  priority    String
  status      String
  description String
  endDate     DateTime
  startDate   DateTime
  type        String

  person     Person[]
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
}

model Location {
  id         String @id @default(cuid())
  address    String
  country    String
  city       String
  postalCode String
  type       String
  capacity   Int
  status     String

  person     Person[]
  activity   Activity?   @relation(fields: [activityId], references: [id])
  activityId String?
  equipment  Equipment[]
}

model Session {
  id             String   @id @default(cuid())
  token          String   @unique
  expirationDate DateTime

  person   Person @relation(fields: [personId], references: [id])
  personId String
}

model PersonDocument {
  id         String   @id @default(cuid())
  person     Person   @relation(fields: [personId], references: [id])
  personId   String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  path       String

  @@unique([personId, documentId])
}

model Survey {
  id             String           @id @default(cuid())
  title          String
  description    String?
  assembly       GeneralAssembly  @relation(fields: [assemblyId], references: [id])
  assemblyId     String
  questions      Question[]
  SurveyResponse SurveyResponse[]
}

model Question {
  id        String       @id @default(cuid())
  label     String
  type      QuestionType
  options   String[]     @default([])
  survey    Survey       @relation(fields: [surveyId], references: [id])
  surveyId  String
  responses Response[]
}

model Response {
  id               String          @id @default(cuid())
  answer           String
  question         Question        @relation(fields: [questionId], references: [id])
  questionId       String
  respondent       Person          @relation(fields: [respondentId], references: [id])
  respondentId     String
  SurveyResponse   SurveyResponse? @relation(fields: [surveyResponseId], references: [id])
  surveyResponseId String?
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
}

model SurveyResponse {
  id           String     @id @default(cuid())
  survey       Survey     @relation(fields: [surveyId], references: [id])
  surveyId     String
  respondent   Person     @relation(fields: [respondentId], references: [id])
  respondentId String
  answers      Response[]
}

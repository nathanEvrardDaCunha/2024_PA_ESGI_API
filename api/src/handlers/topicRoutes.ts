import express, {Request, Response} from "express";import {	calculateVotes,	createTopic,	getAllTopic,	getTopicById, proceedToNextRoundOrEndVoting,	submitVote,	updateTopic} from "../repository/topicRepository";import {ActivityRequest, ActivityValidation} from "./validators/activity-validation";import {TopicRequest, TopicValidation} from "./validators/topic-validation";const topicRouter = express.Router();topicRouter.get('/', async (req: Request, res: Response) => {	try {		const topics = await getAllTopic();		res.status(200).json(topics);	} catch (error) {		console.error('Error fetching topics:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.get('/:id', async (req: Request, res: Response) => {	try {		const topic = await getTopicById(req.params.id);		if (!topic) {			return res.status(404).json({ error: 'Topic not found' });		}		res.status(200).json(topic);	} catch (error) {		console.error('Error fetching topic by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post("/:topicId/next-round-or-end", async (req, res) => {	const { topicId } = req.params;	try {		await proceedToNextRoundOrEndVoting(topicId);		res.status(200).json({ message: "Processed successfully." });	} catch (error) {		console.error("Error processing next round or end voting:", error);		res.status(500).json({ error: "Failed to process next round or end voting." });	}});topicRouter.post('/', async (req: Request, res: Response) => {	const { error, value } = TopicValidation.validate(req.body);	if (error) {		return res.status(400).json({ error: error.details[0].message });	}	const topicRequest = value as TopicRequest;	try {		const newTopic = await createTopic(topicRequest);		res.status(201).json(newTopic);	} catch (error) {		console.error('Error creating topic:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.patch('/:id', async (req: Request, res: Response) => {	try {		const { id } = req.params;		const updatedTopic = await updateTopic(id, req.body);				if (!updatedTopic) {			return res.status(404).json({ error: 'Topic not found' });		}				res.status(200).json(updatedTopic);	} catch (error) {		console.error('Error updating topic:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post('/:topicId/vote', async (req: Request, res: Response) => {	try {		const { topicId } = req.params;		const { choiceId, personId } = req.body;		const result = await submitVote(personId, topicId, choiceId);		res.json(result);	} catch (error) {		console.error('Failed to submit vote:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.get('/:topicId/results', async (req, res) => {	const { topicId } = req.params;	try {		const results = await calculateVotes(topicId);		res.json(results);	} catch (error) {		res.status(400).json({ error: error});	}});topicRouter.post('/vote', async (req, res) => {	try {		const { personId, topicId, choiceId } = req.body;		const vote = await submitVote(personId, topicId, choiceId);		res.json(vote);	} catch (error) {		res.status(500).json({ error: 'Error submitting vote' });	}});export default topicRouter;
import express, {Request, Response} from "express";import {createActivity, getActivityById, getAllActivity, updateActivity, getActivityByPersonIdViaTask} from "../repository/activityRepository";import {GeneralAssemblyRequest, GeneralAssemblyValidation} from "./validators/general-assembly-validation";import {ActivityRequest, ActivityValidation} from "./validators/activity-validation";import {getTaskByPersonId} from "../repository/taskRepository";import taskRouter from "./taskRoutes";const activityRouter = express.Router();activityRouter.get('/', async (req: Request, res: Response) => {	try {		const activities = await getAllActivity();		res.status(200).json(activities);	} catch (error) {		console.error('Error fetching activities:', error);		res.status(500).json({error: 'Internal Server Error'});	}});activityRouter.get('/person/:personId', async (req: Request, res: Response) => {	try {		const personId = req.params.personId;		const personActivities = await getActivityByPersonIdViaTask(personId);		if (!personActivities ) {			return res.status(404).json({ error: 'No activity found for the user' });		}		res.status(200).json(personActivities);	} catch (error) {		console.error('Error fetching activities by user ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});activityRouter.get('/:id', async (req: Request, res: Response) => {	try {		const activity = await getActivityById(req.params.id);		if (!activity) {			return res.status(404).json({ error: 'Activity not found' });		}		res.status(200).json(activity);	} catch (error) {		console.error('Error fetching activity by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});activityRouter.post('/', async (req: Request, res: Response) => {	const { error, value } = ActivityValidation.validate(req.body);	if (error) {		return res.status(400).json({ error: error.details[0].message });	}	const activityRequest = value as ActivityRequest;	try {		const newActivity = await createActivity(activityRequest);		res.status(201).json(newActivity);	} catch (error) {		console.error('Error creating activity:', error);		res.status(500).json({error: 'Internal Server Error'});	}});activityRouter.patch('/:id', async (req: Request, res: Response) => {	try {		const { id } = req.params;		const updatedActivity = await updateActivity(id, req.body);				if (!updatedActivity) {			return res.status(404).json({ error: 'Activity not found' });		}				res.status(200).json(updatedActivity);	} catch (error) {		console.error('Error updating activity:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default activityRouter;
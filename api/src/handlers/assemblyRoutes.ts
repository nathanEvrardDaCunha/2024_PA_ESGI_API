import express, {Request, Response} from "express";import {	calculateAssemblyVotes,	createAssembly,	getAllAssembly,	getAssemblyById, getAssemblyByPersonId,	updateAssembly,	updateAssemblyWithPersons} from "../repository/assemblyRepository";import {GeneralAssemblyRequest, GeneralAssemblyValidation} from "./validators/general-assembly-validation";import {PersonRequest} from "./validators/person-validation";import {getLocationByPersonId} from "../repository/locationsRepository";import locationRouter from "./locationRoutes";import {prisma} from "../index";const assemblyRouter = express.Router();assemblyRouter.get('/', async (req: Request, res: Response) => {	try {		const assemblies = await getAllAssembly();		res.status(200).json(assemblies);	} catch (error) {		console.error('Error fetching assemblies:', error);		res.status(500).json({error: 'Internal Server Error'});	}});assemblyRouter.get('/:id', async (req: Request, res: Response) => {	try {		const assembly = await getAssemblyById(req.params.id);		if (!assembly) {			return res.status(404).json({ error: 'Assembly not found' });		}		res.status(200).json(assembly);	} catch (error) {		console.error('Error fetching assembly by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.post('/', async (req: Request, res: Response) => {	try {		const { error, value } = GeneralAssemblyValidation.validate(req.body);		if (error) {			return res.status(400).json({ error: error.details[0].message });		}		const generalAssemblyRequest = value as GeneralAssemblyRequest;		const newAssembly = await createAssembly(generalAssemblyRequest);		res.status(201).json(newAssembly);	} catch (error) {		console.error('Error creating assembly:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.post('/:assemblyId/link-people', async (req: Request, res: Response) => {	const { assemblyId } = req.params;	const { personIds } = req.body;	try {		const updatedAssembly = await updateAssemblyWithPersons(assemblyId, personIds);		res.status(200).json(updatedAssembly);	} catch (error) {		console.error('Failed to link people to assembly:', error);		res.status(500).send('Failed to link people to assembly.');	}});assemblyRouter.get('/:assemblyId/topics', async (req, res) => {	const { assemblyId } = req.params;	try {		const assembly = await prisma.generalAssembly.findUnique({			where: { id: assemblyId },			include: {				topics: {					include: {						choices: {							include: {								voters: true							}						}					}				},				person: true			}		});		if (!assembly) {			return res.status(404).json({ error: 'Assembly not found' });		}		const topicsWithVoters = assembly.topics.map(topic => ({			...topic,			choices: topic.choices.map(choice => ({				...choice,				voters: choice.voters || []			}))		}));		res.status(200).json({ ...assembly, topics: topicsWithVoters });	} catch (error) {		console.error('Failed to fetch topics:', error);		res.status(500).json({ error: 'Failed to fetch topics' });	}});assemblyRouter.get('/:assemblyId/topics/', async (req, res) => {	const { assemblyId } = req.params;	try {		const assembly = await prisma.generalAssembly.findUnique({			where: { id: assemblyId },			include: {				topics: {					include: {						choices: {							include: {								voters: true							}						}					}				},				person: true			}		});		if (!assembly) {			return res.status(404).json({ error: 'Assembly not found' });		}		const topicsWithVoters = assembly.topics.map(topic => ({			...topic,			choices: topic.choices.map(choice => ({				...choice,				voters: choice.voters || []			}))		}));		res.status(200).json({ ...assembly, topics: topicsWithVoters });	} catch (error) {		console.error('Failed to fetch topics:', error);		res.status(500).json({ error: 'Failed to fetch topics' });	}});assemblyRouter.get('/:assemblyId/filtered-topics/', async (req, res) => {	const { assemblyId } = req.params;	try {		const assembly = await prisma.generalAssembly.findUnique({			where: { id: assemblyId },			include: {				topics: {					where: {						status: {							not: 'finished'						}					},					include: {						choices: {							include: {								voters: true							}						}					}				},				person: true			}		});		if (!assembly) {			return res.status(404).json({ error: 'Assembly not found' });		}		const filteredTopics = assembly.topics.map(topic => ({			...topic,			choices: topic.choices.filter(choice => choice.round === topic.currentRound)		}));		const topicsWithVoters = filteredTopics.map(topic => ({			...topic,			choices: topic.choices.map(choice => ({				...choice,				voters: choice.voters || []			}))		}));		res.status(200).json({ ...assembly, topics: topicsWithVoters });	} catch (error) {		console.error('Failed to fetch topics:', error);		res.status(500).json({ error: 'Failed to fetch topics' });	}});assemblyRouter.patch('/:id', async (req: Request, res: Response) => {	try {		const { id } = req.params;		const updatedAssembly = await updateAssembly(id, req.body);				if (!updatedAssembly) {			return res.status(404).json({ error: 'Assembly not found' });		}				res.status(200).json(updatedAssembly);	} catch (error) {		console.error('Error updating assembly:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.get('/:assemblyId/results', async (req, res) => {	const { assemblyId } = req.params;	try {		const results = await calculateAssemblyVotes(assemblyId);		res.json(results);	} catch (error) {		res.status(400).json({ error: error });	}});assemblyRouter.get('/person/:personId', async (req: Request, res: Response) => {	try {		const personId = req.params.personId;		const personLocations = await getAssemblyByPersonId(personId);		if (!personLocations ) {			return res.status(404).json({ error: 'No locations found for the user' });		}		res.status(200).json(personLocations);	} catch (error) {		console.error('Error fetching locations by user ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.get('/:assemblyId/survey', async (req: Request, res: Response) => {	const { assemblyId } = req.params;	try {		const survey = await prisma.survey.findMany({			where: {				assemblyId: assemblyId,			},			include: {				questions: true,			}		});		if (!survey) {			return res.status(404).json({ error: 'Survey not found' });		}		res.status(200).json(survey);	} catch (error) {		console.error('Error fetching survey:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default assemblyRouter;
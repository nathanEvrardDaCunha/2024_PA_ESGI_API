import express, {Request, Response} from "express";import {createSession, getAllSession, getSessionById, updateSession} from "../repository/sessionRepository";const sessionRouter = express.Router();sessionRouter.get('/', async (req: Request, res: Response) => {	try {		const sessions = await getAllSession();		res.status(200).json(sessions);	} catch (error) {		console.error('Error fetching sessions:', error);		res.status(500).json({error: 'Internal Server Error'});	}});sessionRouter.get('/:id', async (req: Request, res: Response) => {	try {		const session = await getSessionById(req.params.id);		if (!session) {			return res.status(404).json({ error: 'Session not found' });		}		res.status(200).json(session);	} catch (error) {		console.error('Error fetching session by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});sessionRouter.post('/', async (req: Request, res: Response) => {	try {		const newSession = await createSession(req.body);		res.status(201).json(newSession);	} catch (error) {		console.error('Error creating session:', error);		res.status(500).json({error: 'Internal Server Error'});	}});sessionRouter.patch('/:id', async (req: Request, res: Response) => {		try {		const { id } = req.params;		const updatedSession = await updateSession(id, req.body);				if (!updatedSession) {			return res.status(404).json({ error: 'Session not found' });		}				res.status(200).json(updatedSession);	} catch (error) {		console.error('Error updating session:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default sessionRouter;
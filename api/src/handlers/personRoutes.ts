import express, {Request, Response} from "express";import {	createPerson, deletePersonById,	getAllPerson,	getPersonById, loginAdmin,	loginUser,	registerUser, resetPassword,	updatePerson} from "../repository/personRepository";import {	LoginPersonRequest,	LoginPersonValidation,	PersonRequest, PersonUpdateRequest, PersonUpdateValidation,	PersonValidation} from "./validators/person-validation";import {prisma} from "../index";import { compare, hash } from "bcrypt";const personRouter = express.Router();import {generateValidationErrorMessage} from "./validators/generate-validation-message";import {generateToken} from "./middleware/auth-middleware";personRouter.get('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const persons = await getAllPerson();		res.status(200).json(persons);	} catch (error) {		console.error('Error fetching persons:', error);		res.status(500).json({error: 'Internal Server Error'});	}});personRouter.get('/:id', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const person = await getPersonById(req.params.id);		if (!person) {			return res.status(404).json({ error: 'Person not found' });		}		res.status(200).json(person);	} catch (error) {		console.error('Error fetching person by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});personRouter.post('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const newPerson = await createPerson(req.body);		res.status(201).json(newPerson);	} catch (error) {		console.error('Error creating person:', error);		res.status(500).json({error: 'Internal Server Error'});	}});personRouter.patch('/:id', async (req: Request, res: Response) => {	// TODO: Check all argument validation	// TODO: Write the service rules	try {		const validationResult = PersonUpdateValidation.validate(req.body);		if (validationResult.error) {			res.status(400).send(generateValidationErrorMessage(validationResult.error.details));			return;		}		const { id } = req.params;		const updateData: PersonUpdateRequest = req.body;		const updatedPerson = await updatePerson(id, updateData);				if (!updatedPerson) {			return res.status(404).json({ error: 'Person not found' });		}				res.status(200).json(updatedPerson);	} catch (error) {		console.error('Error updating person:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});personRouter.post("/auth/signup", async (req: Request, res: Response) => {	try {		const validationResult = PersonValidation.validate(req.body);		if (validationResult.error) {			res.status(400).send(generateValidationErrorMessage(validationResult.error.details));			return;		}		const personRequest = validationResult.value as PersonRequest;		const result = await registerUser(personRequest);		res.status(201).send(result);	} catch (error) {		console.log(error);		res.status(500).send({ error: "Internal Server Error" });	}});personRouter.post("/auth/login", async (req: Request, res: Response) => {	try {		const validationResult = LoginPersonValidation.validate(req.body);		if (validationResult.error) {			res.status(400).send(generateValidationErrorMessage(validationResult.error.details));			return;		}		const loginRequest = validationResult.value as LoginPersonRequest;		const result = await loginUser(loginRequest);		res.status(200).json(result);	} catch (error) {		console.log(error);		res.status(500).send({ error: "Internal Server Error" });	}});personRouter.post("/admin/auth/login", async (req: Request, res: Response) => {	try {		const validationResult = LoginPersonValidation.validate(req.body);		if (validationResult.error) {			res.status(400).send(generateValidationErrorMessage(validationResult.error.details));			return;		}		const loginRequest = validationResult.value as LoginPersonRequest;		const result = await loginAdmin(loginRequest);		res.status(200).json(result);	} catch (error) {		console.log(error);		res.status(500).send({ error: "Internal Server Error" });	}});personRouter.delete('/:id', async (req, res) => {	try {		const { id } = req.params;		const deletedPerson = await deletePersonById(id);		if (deletedPerson) {			res.sendStatus(204); // Successful deletion, no content to send back		} else {			res.sendStatus(404); // Person not found		}	} catch (error) {		console.error('Error deleting person:', error);		res.sendStatus(500); // Internal Server Error	}});personRouter.delete('/admin/:id', async (req, res) => {	try {		const { id } = req.params;		const deletedPerson = await deletePersonById(id);		if (deletedPerson) {			res.sendStatus(204); // Successful deletion, no content to send back		} else {			res.sendStatus(404); // Person not found		}	} catch (error) {		console.error('Error deleting person:', error);		res.sendStatus(500); // Internal Server Error	}});personRouter.post("/reset-password", async (req: Request, res: Response) => {	try {		const { email } = req.body;		if (!email) {			res.status(400).send({ error: "Email is required" });			return;		}		await resetPassword(email);		res.status(200).send({ message: "Password reset link sent to your email" });	} catch (error) {		console.log(error);		res.status(500).send({ error: "Internal Server Error" });	}});export default personRouter;
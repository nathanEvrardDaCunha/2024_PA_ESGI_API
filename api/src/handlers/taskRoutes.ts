import express, {Request, Response} from "express";import {createTask, getAllTask, getTaskById, getTaskByPersonId, updateTask} from "../repository/taskRepository";import {GeneralAssemblyRequest, GeneralAssemblyValidation} from "./validators/general-assembly-validation";import taskValidation, {TaskRequest, TaskUpdateValidation, TaskValidation} from "./validators/task-validation";const taskRouter = express.Router();taskRouter.get('/', async (req: Request, res: Response) => {	try {		const tasks = await getAllTask();		res.status(200).json(tasks);	} catch (error) {		console.error('Error fetching tasks:', error);		res.status(500).json({error: 'Internal Server Error'});	}});taskRouter.get('/person/:personId', async (req: Request, res: Response) => {	try {		const personId = req.params.personId;		const personTasks = await getTaskByPersonId(personId);		if (!personTasks ) {			return res.status(404).json({ error: 'No task found for the user' });		}		res.status(200).json(personTasks);	} catch (error) {		console.error('Error fetching tasks by user ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});taskRouter.get('/:id', async (req: Request, res: Response) => {	try {		const task = await getTaskById(req.params.id);		if (!task) {			return res.status(404).json({ error: 'Task not found' });		}		res.status(200).json(task);	} catch (error) {		console.error('Error fetching task by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});taskRouter.post('/', async (req: Request, res: Response) => {	try {		const { error, value } = TaskValidation.validate(req.body);		if (error) {			return res.status(400).json({ error: error.details[0].message });		}		const taskRequest = value as TaskRequest;		const newTask = await createTask(taskRequest);		res.status(201).json(newTask);	} catch (error) {		console.error('Error creating task:', error);		res.status(500).json({error: 'Internal Server Error'});	}});taskRouter.patch('/:id', async (req: Request, res: Response) => {	try {		const { error, value } = TaskUpdateValidation.validate(req.body);		if (error) {			return res.status(400).json({ error: error.details[0].message });		}		const { id } = req.params;		const updatedTask = await updateTask(id, req.body);				if (!updatedTask) {			return res.status(404).json({ error: 'Task not found' });		}				res.status(200).json(updatedTask);	} catch (error) {		console.error('Error updating task:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default taskRouter;